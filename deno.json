{
  "tasks": {
    "docs": "cd docs && bun start",
    "dev": "cd frontend && deno task dev",
    "open-local-app": "open http://localhost:8080/",
    "docker:build": "cd frontend && docker build . -t fresh-app",
    "docker:run": "docker run -p 8080:80 fresh-app",
    "k8s:deploy": "skaffold run",
    "k8s:delete": "skaffold delete",
    "k8s:forward": "kubectl -n app port-forward svc/fresh-app 8080:80",
    "image:latest": "deno run --allow-net --allow-env=TAG_PREFIX,PLATFORM_OS,PLATFORM_ARCH scripts/get_latest_image.ts",
    "cluster:sync-check": "deno run --allow-run --allow-read --allow-net scripts/check_cluster_sync.ts",
    "tp:setup": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts",
    "tp:connect": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts --connect",
    "tp:intercept": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts --connect --intercept --service fresh-app --service-namespace app --port 8000",
    "tp:leave": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts --leave --name fresh-app",
    "tp:quit": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts --quit",
    "tp:status": "deno run --allow-env --allow-run --allow-read --allow-write --allow-net scripts/setup_telepresence.ts --status",
    "test": "cd frontend && deno test --allow-env --allow-read --coverage=.cov && deno coverage .cov --lcov > coverage.lcov",
    "test:watch": "cd frontend && deno test --allow-env --allow-read --watch",
    "coverage": "cd frontend && deno test --allow-env --allow-read --coverage=.cov && deno coverage .cov --lcov > coverage.lcov",
    "ci:fmt": "cd frontend && deno fmt --check",
    "ci:lint": "cd frontend && deno lint",
    "ci:typecheck": "cd frontend && deno check",
    "ci:test": "cd frontend && deno test --allow-env --allow-read",
    "ci:all": "deno task ci:fmt && deno task ci:lint && deno task ci:typecheck && deno task ci:test",
    "hooks:install": "git config core.hooksPath scripts/git-hooks && echo 'Git hooks installed. (core.hooksPath=scripts/git-hooks)'",
    "hooks:uninstall": "git config --unset core.hooksPath || true && echo 'Git hooks uninstalled (core.hooksPath removed).'",
    "hooks:status": "git config --get core.hooksPath || echo '(no hooksPath set)'",
    "scripts:init": "deno run --allow-read --allow-write --allow-env scripts/init.ts",
    "scripts:scan": "deno run --allow-read --allow-env scripts/init.ts --scan --fail-on-violations"
  }
}
